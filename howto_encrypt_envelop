### Scenario: Implementing Envelope Encryption for Kubernetes Secrets in a New EKS Cluster

**Background:**
You are tasked with creating a new Amazon EKS cluster and ensuring that Kubernetes secrets are securely stored and protected using envelope encryption with AWS KMS. You will also configure the necessary infrastructure and permissions to enable this feature.

---

### **Step 1: Prerequisites**
Before creating the EKS cluster, ensure the following prerequisites are met:
1. **AWS CLI**: Install and configure the AWS CLI with the necessary permissions to create EKS clusters, KMS keys, and IAM roles.
2. **eksctl**: Install `eksctl`, the official CLI for managing EKS clusters.
3. **kubectl**: Install `kubectl` to interact with the Kubernetes cluster.
4. **IAM Permissions**: Ensure your AWS user or role has permissions to create EKS clusters, KMS keys, and IAM roles.

---

### **Step 2: Create a KMS Key**
Envelope encryption requires a KMS key to serve as the master key. Create a KMS key in AWS:
1. Open the AWS Management Console or use the AWS CLI.
2. Create a KMS key:
   ```bash
   aws kms create-key --description "EKS Secrets Encryption Key"
   ```
3. Note the **Key ARN** from the output. You will need this when creating the EKS cluster.

---

### **Step 3: Create an EKS Cluster with Envelope Encryption Enabled**
Use `eksctl` to create the EKS cluster and enable envelope encryption for Kubernetes secrets.

1. Create a configuration file for the EKS cluster (e.g., `cluster.yaml`):
   ```yaml
   apiVersion: eksctl.io/v1alpha5
   kind: ClusterConfig

   metadata:
     name: my-eks-cluster
     region: us-west-2
     version: "1.28"

   secretsEncryption:
     keyARN: arn:aws:kms:us-west-2:123456789012:key/your-kms-key-id

   managedNodeGroups:
     - name: ng-1
       instanceType: t3.medium
       minSize: 2
       maxSize: 5
       desiredCapacity: 3
   ```

   Replace `keyARN` with the ARN of the KMS key you created earlier.

2. Create the cluster:
   ```bash
   eksctl create cluster -f cluster.yaml
   ```

   This command will:
   - Create the EKS cluster.
   - Enable envelope encryption for Kubernetes secrets using the specified KMS key.
   - Create a managed node group with the specified configuration.

---

### **Step 4: Verify Envelope Encryption**
Once the cluster is created, verify that envelope encryption is enabled:
1. Fetch the cluster configuration:
   ```bash
   aws eks describe-cluster --name my-eks-cluster --region us-west-2
   ```
2. Check the `encryptionConfig` section in the output to confirm that the KMS key ARN is listed.

---

### **Step 5: Deploy a Test Secret**
Deploy a Kubernetes secret to verify that it is encrypted using the KMS key:
1. Create a secret:
   ```bash
   kubectl create secret generic my-secret --from-literal=username=admin --from-literal=password=secret
   ```
2. Verify the secret is created:
   ```bash
   kubectl get secret my-secret -o yaml
   ```
   The `data` field should contain base64-encoded values, but these values are now encrypted using the KMS key.

---

### **Step 6: Configure IAM Roles for Service Accounts (IRSA)**
To allow Kubernetes pods to decrypt secrets using the KMS key, configure IAM Roles for Service Accounts (IRSA):
1. Create an IAM policy for KMS access:
   ```json
   {
     "Version": "2012-10-17",
     "Statement": [
       {
         "Effect": "Allow",
         "Action": [
           "kms:Decrypt",
           "kms:Encrypt",
           "kms:GenerateDataKey"
         ],
         "Resource": "arn:aws:kms:us-west-2:123456789012:key/your-kms-key-id"
       }
     ]
   }
   ```
2. Attach the policy to an IAM role:
   ```bash
   aws iam create-role --role-name eks-secrets-role --assume-role-policy-document file://trust-policy.json
   aws iam attach-role-policy --role-name eks-secrets-role --policy-arn arn:aws:iam::123456789012:policy/eks-secrets-policy
   ```
3. Create a Kubernetes service account and associate it with the IAM role:
   ```bash
   eksctl create iamserviceaccount \
     --name my-service-account \
     --namespace default \
     --cluster my-eks-cluster \
     --attach-policy-arn arn:aws:iam::123456789012:policy/eks-secrets-policy \
     --approve
   ```

---

### **Step 7: Deploy a Pod Using the Service Account**
Deploy a pod that uses the service account to access the secret:
1. Create a pod manifest (e.g., `pod.yaml`):
   ```yaml
   apiVersion: v1
   kind: Pod
   metadata:
     name: my-pod
   spec:
     serviceAccountName: my-service-account
     containers:
     - name: my-container
       image: busybox
       command: ["sleep", "3600"]
       env:
       - name: USERNAME
         valueFrom:
           secretKeyRef:
             name: my-secret
             key: username
       - name: PASSWORD
         valueFrom:
           secretKeyRef:
             name: my-secret
             key: password
   ```
2. Deploy the pod:
   ```bash
   kubectl apply -f pod.yaml
   ```
3. Verify the pod can access the secret:
   ```bash
   kubectl exec -it my-pod -- env | grep USERNAME
   kubectl exec -it my-pod -- env | grep PASSWORD
   ```

---

### **Step 8: Recap**
- You created a KMS key for envelope encryption.
- You created an EKS cluster with envelope encryption enabled for Kubernetes secrets.
- You verified that secrets are encrypted using the KMS key.
- You configured IRSA to allow pods to decrypt secrets.
- You deployed a pod that securely accesses the encrypted secret.

---

### **Next Steps:**
In the next module, youâ€™ll explore how to implement **fine-grained access control** for secrets using Kubernetes RBAC and IRSA. This will ensure that only authorized pods and users can access specific secrets.
